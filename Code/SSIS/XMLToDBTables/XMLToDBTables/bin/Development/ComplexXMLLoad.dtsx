<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/1/2017 11:41:19 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="WS169987"
  DTS:CreatorName="FPLNT\SKM0XVY"
  DTS:DTSID="{C88AD3F8-4BF7-46FB-937E-27F1098D6F31}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.1000.169"
  DTS:LocaleID="1033"
  DTS:ObjectName="ComplexXMLLoad"
  DTS:PackageType="5"
  DTS:VersionBuild="122"
  DTS:VersionGUID="{BC25977D-0503-4192-8A9F-9EF8426CDBDE}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{63CA5852-339A-40B6-B75F-A3E7D7991580}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFileID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D4C8F850-5E9B-461E-AB2A-1F3A92769EBA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFileNameWithPath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2C7B1594-1C7F-42EB-8B75-30380BB5EB90}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFilePath">
      <DTS:VariableValue
        DTS:DataType="8">E:\Development\GitHubRepo\Load-Complex-XML-to-SQL-Server\Code\Source</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{079B4414-B8F7-49CF-88AE-440C38048EC2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFileSpec">
      <DTS:VariableValue
        DTS:DataType="8">*.XML</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6CAF8E1E-0ED8-4DA0-940E-6D0DDD4D933E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="XMLFrameWork">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{904A1117-9EEE-43A1-A8B3-5838E2EE9522}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLSQLDatabase">
      <DTS:VariableValue
        DTS:DataType="8">XMLDB</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AC8204BE-365C-48DE-B66C-E2CC83BEC693}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLSQLServer">
      <DTS:VariableValue
        DTS:DataType="8">LOCALHOST\SQL2012</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{39610A05-3773-4056-9B82-D8C71EEDAB05}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="XMLTablePrefix">
      <DTS:VariableValue
        DTS:DataType="8">MYXML_</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Loop XML Files"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{D03F3734-1B79-49D9-8CC5-3C4CF74B769D}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Loop XML Files">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{CD2609C1-2B9B-40DE-BDFF-6193550D12B7}"
        DTS:ObjectName="{C762DA90-00C7-49AC-A069-A9A8FC10BB57}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[User::XMLFilePath]</DTS:PropertyExpression>
        <DTS:PropertyExpression
          DTS:Name="FileSpec">@[User::XMLFileSpec]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="E:\Development\GitHubRepo\Load-Complex-XML-to-SQL-Server\Code\Source" />
            <FEFEProperty
              FileSpec="*.XML" />
            <FEFEProperty
              FileNameRetrievalType="0" />
            <FEFEProperty
              Recurse="-1" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Loop XML Files\Load XML Data into Table"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{4AA44049-7507-499B-9FA5-A3360CE4A2A4}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Load XML Data into Table"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_6b6761bb822f4648b77be04d55f2e5c1"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::XMLFileID,User::XMLFileNameWithPath,User::XMLFilePath,User::XMLFrameWork,User::XMLSQLDatabase,User::XMLSQLServer,User::XMLTablePrefix">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b84cf8eb06ee4495b38ea173d57673bd")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_b84cf8eb06ee4495b38ea173d57673bd")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_6b6761bb822f4648b77be04d55f2e5c1.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{EDB8103E-3F3F-4011-9DCD-CD964A141ECA}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_b84cf8eb06ee4495b38ea173d57673bd</RootNamespace><AssemblyName>ST_6b6761bb822f4648b77be04d55f2e5c1</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug7a470cfb-7b34-4398-aebb-81df1c49b68d/12cd7605-b858-4147-b6d6-71d254a4e8d9&quot;" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST130</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

using System.Data.SqlClient;
using System.Xml;
//using System.Xml.Linq;
#endregion

namespace ST_b84cf8eb06ee4495b38ea173d57673bd
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        SqlConnection SQLConn;
        SqlCommand cmd;

		public void Main()
		{
            try
            {
                String XMLFileNameWithPath;
                Boolean XMLFrameWork;
                String XMLTablePrefix;

                String SQL = "";
                String InsertSQL = "";
                String ErrorSQL = "";
                String CreateTableSQL = "";
                String AlterTableSQL = "";

                String DBTableName;
                String DBColumnNames;
                String DBColumnDataType;


                String XMLFileID;
                DataSet XMLDataset;
                DataTable XMLDataTable;
                String XMLColumnDataType;
                String XMLColumnName;

                String ParentTableName = "";
                String ParentColumnName = "";
                String ChildTableName = "";
                String ChildColumnName = "";

                DateTime XMLLoadDateTime;


                String SPPConnString;
                
                

                String XMLSQLServer;
                String XMLDatabase;

                XMLSQLServer = Dts.Variables["XMLSQLServer"].Value.ToString();
                XMLDatabase = Dts.Variables["XMLSQLDatabase"].Value.ToString();

                SPPConnString = "Server=" + XMLSQLServer + "; Database=" + XMLDatabase + ";Trusted_Connection=True;";

                SQLConn = new SqlConnection();
                SQLConn.ConnectionString = SPPConnString;
                SQLConn.Open();

                XMLFileNameWithPath = Dts.Variables["XMLFileNameWithPath"].Value.ToString();
                XMLFileID = Dts.Variables["XMLFileID"].Value.ToString();
                XMLFrameWork = (Boolean)Dts.Variables["XMLFrameWork"].Value;
                XMLTablePrefix = Dts.Variables["XMLTablePrefix"].Value.ToString();

                if (XMLFrameWork)
                {

                    

                    SQL = "GenerateXMLFileID";
                    cmd = new SqlCommand(SQL, SQLConn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@XMLFileNameWithPath", XMLFileNameWithPath);
                    //cmd.Parameters[0].Value = XMLFileNameWithPath;
                    XMLFileID = (String)cmd.ExecuteScalar();
                    cmd = null;
                }
                XMLLoadDateTime = DateTime.Now;

                XMLDataset = new DataSet();
                XMLDataset.ReadXml(XMLFileNameWithPath);

                for (int XMLTableCount = 0; XMLTableCount <= XMLDataset.Tables.Count - 1; XMLTableCount++)
                {
                    XMLDataTable = XMLDataset.Tables[XMLTableCount];

                    if (XMLFrameWork)
                    {
                        /* Get table Relationships */
                        InsertSQL = "INSERT INTO DBO.[XMLTableRelationship](XMLFileID, ParentTableName, ParentColumnName, ChildTableName, ChildColumnName)";
                        if (XMLDataTable.ParentRelations.Count > 0)
                        {
                            foreach (DataRelation dr in XMLDataTable.ParentRelations)
                            {
                                ParentTableName = dr.ParentTable.TableName;
                                ParentColumnName = "";
                                foreach (DataColumn dc in dr.ParentColumns)
                                {
                                    ParentColumnName = ParentColumnName + dc.ColumnName + ",";
                                }
                                ParentColumnName = ParentColumnName.Substring(0, ParentColumnName.Length - 1);

                                ChildTableName = dr.ChildTable.TableName;
                                ChildColumnName = "";
                                foreach (DataColumn dc in dr.ChildColumns)
                                {
                                    ChildColumnName = ChildColumnName + dc.ColumnName + ",";
                                }
                                ChildColumnName = ChildColumnName.Substring(0, ChildColumnName.Length - 1);

                                InsertSQL = InsertSQL + Environment.NewLine + " SELECT ";
                                InsertSQL = InsertSQL + "'" + XMLFileID + "',";
                                InsertSQL = InsertSQL + "'" + ParentTableName + "',";
                                InsertSQL = InsertSQL + "'" + ParentColumnName + "',";
                                InsertSQL = InsertSQL + "'" + ChildTableName + "',";
                                InsertSQL = InsertSQL + "'" + ChildColumnName + "'";

                                cmd = new SqlCommand(InsertSQL, SQLConn);
                                cmd.ExecuteNonQuery();
                                cmd = null;
                            }

                        }
                        else
                        {
                            ParentTableName = "";
                            ParentColumnName = "";
                            ChildTableName = XMLDataTable.TableName;
                            ChildColumnName = "";

                            InsertSQL = InsertSQL + Environment.NewLine + " SELECT ";
                            InsertSQL = InsertSQL + "'" + XMLFileID + "',";
                            InsertSQL = InsertSQL + "'" + ParentTableName + "',";
                            InsertSQL = InsertSQL + "'" + ParentColumnName + "',";
                            InsertSQL = InsertSQL + "'" + ChildTableName + "',";
                            InsertSQL = InsertSQL + "'" + ChildColumnName + "'";

                            cmd = new SqlCommand(InsertSQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }

                    }
                    /* Load Data */

                    DBTableName = XMLTablePrefix + XMLDataset.Tables[XMLTableCount].TableName.ToString();

                    SQL = "SELECT ISNULL((SELECT '#' + SC.NAME  FROM SYS.OBJECTS SO JOIN SYS.COLUMNS SC ON SO.object_id = SC.object_id WHERE SO.TYPE = 'U' AND SO.NAME = '" + DBTableName + "' ORDER BY SC.NAME For XML PATH ('') ) + '#','')";

                    cmd = new SqlCommand(SQL, SQLConn);
                    DBColumnNames = (String)cmd.ExecuteScalar();
                    cmd = null;

                    if (XMLFrameWork)
                    {
                        if (DBColumnNames.IndexOf("#XMLFileID#") < 0 && DBColumnNames.Length > 0)
                        {
                            AlterTableSQL = "ALTER TABLE DBO." + DBTableName + " ADD " + "[XMLFileID]  int ";
                            cmd = new SqlCommand(AlterTableSQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }
                        else
                        {
                            CreateTableSQL = "CREATE TABLE DBO." + DBTableName + Environment.NewLine + "( XMLFileID int,";
                        }
                    }
                    else
                    {
                        if (DBColumnNames.IndexOf("#XMLFileNameWithPath#") < 0 && DBColumnNames.Length > 0)
                        {
                            AlterTableSQL = "ALTER TABLE DBO." + DBTableName + " ADD " + "[XMLFileNameWithPath]  nvarchar(max), XMLLoadDateTime DateTime ";
                            cmd = new SqlCommand(AlterTableSQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }
                        else
                        {
                            CreateTableSQL = "CREATE TABLE DBO." + DBTableName + Environment.NewLine + "( XMLFileNameWithPath nvarchar(max), XMLLoadDateTime DateTime,";
                        }

                    }

                    InsertSQL = "INSERT INTO DBO." + DBTableName + Environment.NewLine + "(";

                    for (int XMLColCount = 0; XMLColCount <= XMLDataTable.Columns.Count - 1; XMLColCount++)
                    {
                        XMLColumnName = XMLDataTable.Columns[XMLColCount].ColumnName;
                        InsertSQL = InsertSQL + "[" + XMLColumnName + "],";

                        if (DBColumnNames == "" || DBColumnNames.IndexOf("#" + XMLColumnName + "#") < 0)
                        {
                            XMLColumnDataType = XMLDataTable.Columns[XMLColCount].DataType.ToString().ToUpper();

                            if (XMLColumnDataType == "SYSTEM.INT16")
                            {
                                DBColumnDataType = "smallint";
                            }
                            else if (XMLColumnDataType == "SYSTEM.INT32")
                            {
                                DBColumnDataType = "int";
                            }
                            else if (XMLColumnDataType == "SYSTEM.INT64")
                            {
                                DBColumnDataType = "bigint";
                            }
                            else if (XMLColumnDataType == "SYSTEM.DATETIME")
                            {
                                DBColumnDataType = "datetime";
                            }
                            else if (XMLColumnDataType == "SYSTEM.STRING")
                            {
                                DBColumnDataType = "nvarchar(max)";
                            }
                            else if (XMLColumnDataType == "SYSTEM.SINGLE")
                            {
                                DBColumnDataType = "single";
                            }
                            else if (XMLColumnDataType == "SYSTEM.DOUBLE")
                            {
                                DBColumnDataType = "double";
                            }
                            else if (XMLColumnDataType == "SYSTEM.DECIMAL")
                            {
                                DBColumnDataType = "decimal(18, 6)";
                            }
                            else
                            {
                                DBColumnDataType = "nvarchar(max)";
                            };

                            if (DBColumnNames == "")
                            {
                                CreateTableSQL = CreateTableSQL + "[" + XMLColumnName + "]   " + DBColumnDataType + ",";
                            }
                            else
                            {
                                AlterTableSQL = "ALTER TABLE DBO." + DBTableName + " ADD " + "[" + XMLColumnName + "]   " + DBColumnDataType;
                                cmd = new SqlCommand(AlterTableSQL, SQLConn);
                                cmd.ExecuteNonQuery();
                                cmd = null;
                            }
                        }
                    }

                    if (DBColumnNames == "")
                    {
                        CreateTableSQL = CreateTableSQL.Substring(0, CreateTableSQL.Length - 1) + ")";
                        cmd = new SqlCommand(CreateTableSQL, SQLConn);
                        cmd.ExecuteNonQuery();
                        cmd = null;
                    }

                    if (XMLFrameWork)
                    {
                        InsertSQL = InsertSQL + "[XMLFileID])";
                    }
                    else
                    {
                        InsertSQL = InsertSQL + "[XMLFileNameWithPath],XMLLoadDateTime)";
                    }

                    foreach (DataRow XMLDataRow in XMLDataTable.Rows)
                    {
                        SQL = InsertSQL + Environment.NewLine + " SELECT ";
                        for (int XMLColCount = 0; XMLColCount <= XMLDataTable.Columns.Count - 1; XMLColCount++)
                        {
                            SQL = SQL + "'" + XMLDataRow[XMLDataTable.Columns[XMLColCount].ColumnName].ToString().Replace("'", "''") + "',";
                        }

                        if (XMLFrameWork)
                        {
                            SQL = SQL + "'" + XMLFileID + "'";
                        }
                        else
                        {
                            SQL = SQL + "'" + XMLFileNameWithPath + "','" + XMLLoadDateTime.ToString() + "'";
                        }

                        try
                        {
                            cmd = new SqlCommand(SQL, SQLConn);
                            cmd.ExecuteNonQuery();
                            cmd = null;
                        }
                        catch
                        {
                            if (XMLFrameWork)
                            {
                                ErrorSQL = "INSERT INTO DBO.XMLErrorLog" + Environment.NewLine;
                                ErrorSQL = ErrorSQL + "([XMLFileID], [SQLStatement], [ErrorDateTime], [XMLTableName])";
                                ErrorSQL = ErrorSQL + "SELECT '" + XMLFileID + "','" + SQL.Replace("'", "''") + "',GETDATE(),'" + DBTableName + "'";
                                cmd = new SqlCommand(ErrorSQL, SQLConn);
                                cmd.ExecuteNonQuery();
                                cmd = null;
                            }
                            else
                            {
                                Dts.Events.FireError(-1, "XMLLoad", "Error in inserting the following data from XML File" + Environment.NewLine + SQL, String.Empty, 0);
                                Dts.TaskResult = (int)ScriptResults.Failure;
                                SQLConn.Close();
                                SQLConn.Dispose();
                            }
                        }
                    }



                }



                SQLConn.Close();
                SQLConn.Dispose();

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception e)
            {
                //SqlConn = null;
                Dts.Events.FireError(-1, "XMLLoad", e.Message, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

       

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_161ff6df8fbe475382e21485c9ab40c6</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_161ff6df8fbe475382e21485c9ab40c6</msb:DisplayName>
		<msb:ProjectId>{1976A95C-AABC-429C-B307-A3E988149C1F}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_6b6761bb822f4648b77be04d55f2e5c1.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b84cf8eb06ee4495b38ea173d57673bd.Properties.Settings.get_Default():ST_b84cf8eb06ee4495b38ea173d57673bd.Properties.Sett" +
    "ings")]

namespace ST_b84cf8eb06ee4495b38ea173d57673bd.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b84cf8eb06ee4495b38ea173d57673bd.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b84cf8eb06ee4495b38ea173d57673bd.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b84cf8eb06ee4495b38ea173d57673bd.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b84cf8eb06ee4495b38ea173d57673bd.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b84cf8eb06ee4495b38ea173d57673bd.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_6b6761bb822f4648b77be04d55f2e5c1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPppMFoAAAAAAAAAAOAAIiALATAAACoAAAAIAAAAAAAALkgA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANxHAABPAAAAAGAAAJwEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAANCgAAAAgAAAAKgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJwEAAAAYAAAAAYAAAAsAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAQ
SAAAAAAAAEgAAAACAAUA2CsAAEwbAAABAAAAAAAAACRHAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgCwCgAAAQAAEXIBAABwDXIBAABwEwRyAQAAcBMFcgEA
AHATBnIBAABwEwdyAQAAcBMQcgEAAHATEXIBAABwExJyAQAAcBMTAigQAAAKbxEAAApyAwAAcG8S
AAAKbxMAAApvFAAAChMWAigQAAAKbxEAAApyHQAAcG8SAAAKbxMAAApvFAAAChMXG40mAAABJRZy
OwAAcKIlFxEWoiUYcksAAHCiJRkRF6IlGnJjAABwoigVAAAKExUCcxYAAAp9AQAABAJ7AQAABBEV
bxcAAAoCewEAAARvGAAACgIoEAAACm8RAAAKcpcAAHBvEgAACm8TAAAKbxQAAAoKAigQAAAKbxEA
AApyvwAAcG8SAAAKbxMAAApvFAAAChMLAigQAAAKbxEAAApy0wAAcG8SAAAKbxMAAAqlKAAAAQsC
KBAAAApvEQAACnLtAABwbxIAAApvEwAACm8UAAAKDAcsVHILAQBwDQIJAnsBAAAEcxkAAAp9AgAA
BAJ7AgAABBpvGgAACgJ7AgAABG8bAAAKci8BAHAGbxwAAAomAnsCAAAEbx0AAAp0JgAAARMLAhR9
AgAABCgeAAAKExRzHwAAChMMEQwGbyAAAAomFhMYOHkIAAARDG8hAAAKERhvIgAAChMNBzmCAgAA
clkBAHATBBENbyMAAApvJAAAChY+qQEAABENbyMAAApvJQAAChMZOHABAAARGW8mAAAKdBUAAAET
GhEabycAAApvKAAAChMQcgEAAHATEREabykAAAoTGxYTHCsiERsRHJoTHRERER1vKgAACnJGAgBw
KCsAAAoTEREcF1gTHBEcERuOaTLWEREWERFvLAAAChdZby0AAAoTEREaby4AAApvKAAAChMScgEA
AHATExEaby8AAAoTGxYTHCsiERsRHJoTHhETER5vKgAACnJGAgBwKCsAAAoTExEcF1gTHBEcERuO
aTLWERMWERNvLAAAChdZby0AAAoTExEEKDAAAApySgIAcCgrAAAKEwQRBHJcAgBwEQtyYAIAcCgx
AAAKEwQRBHJcAgBwERByYAIAcCgxAAAKEwQRBHJcAgBwERFyYAIAcCgxAAAKEwQRBHJcAgBwERJy
YAIAcCgxAAAKEwQRBHJcAgBwERNyXAIAcCgxAAAKEwQCEQQCewEAAARzGQAACn0CAAAEAnsCAAAE
bzIAAAomAhR9AgAABBEZbzMAAAo6hP7//93VAAAAERl1FwAAARMfER8sBxEfbzQAAArccgEAAHAT
EHIBAABwExERDW8oAAAKExJyAQAAcBMTEQQoMAAACnJKAgBwKCsAAAoTBBEEclwCAHARC3JgAgBw
KDEAAAoTBBEEclwCAHAREHJgAgBwKDEAAAoTBBEEclwCAHAREXJgAgBwKDEAAAoTBBEEclwCAHAR
EnJgAgBwKDEAAAoTBBEEclwCAHARE3JcAgBwKDEAAAoTBAIRBAJ7AQAABHMZAAAKfQIAAAQCewIA
AARvMgAACiYCFH0CAAAECBEMbyEAAAoRGG8iAAAKbygAAApvFAAACig1AAAKEwhyZgIAcBEIcocD
AHAoKwAACg0CCQJ7AQAABHMZAAAKfQIAAAQCewIAAARvHQAACnQmAAABEwkCFH0CAAAEByxxEQly
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
YgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAA4AAAABQAAAAgAAAAJAAAAAQAAAEwAAAAC
AAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAADFBAEAAAAAAAYANgPGBgYA
xQPGBgYAggKzBg8AOgcAAAYArwJ4BQYAGQN4BQYA+gJ4BQYArAN4BQYAVgN4BQYAbwN4BQYAxgJ4
BQYA4QIIBAoAigN0BAoA2AF0BA4AAAZiCA4AnABiCA4APwhVAA4A1wBVAAYAVgH+BAYAjAbdBw4A
QQVVAA4ALgVVAAYACQH+BA4AtQhVAAYADgb+BAYAOAj+BAYABQX+BAYAZQKzBgYASQbmBgYAKwZj
BRIANQKvBBIAlgKvBBIADwJOBQYASgLGBgoAnQR0BBYAhwdfARYAAAFfAQYAOQT+BA4A8wUYBgYA
FgX+BA4AkgAYBg4AnAFVAA4AygViCA4AdQZiCA4AvwBVAA4AigVVAA4AswVVAA4A9AFVAAYAeAj+
BA4AngVVAAYAowH+BA4A4QVVAAoAYQZ0BBIAhAivBAYAFQH+BAYAwQh4BQAAAAAlAAAAAAABAAEA
AQAQACMFagA5AAEAAQAAABAA7QZJB2kAAwADAAABEACRB0kHhQAFAAcAAwEAAA8IAABtAAYACgAB
ADkFUwEBAI4AVwERAAoFWwERAMgBXwERAK8AYwEGBk0AZwFWgP8HagFWgKgBagFQIAAAAACGACkF
BgABAHArAAAAAIYYpgYGAAEAeCsAAAAAgximBgYAAQCAKwAAAACTCEUGbgEBAKwrAAAAAJMIsAFz
AQEAsysAAAAAkwi8AXgBAQC7KwAAAACWCEcIfgECAMIrAAAAAIYYpgYGAAIAyisAAAAAkRisBoMB
AgAAAAEA+gMJAKYGAQARAKYGBgAZAKYGCgApAKYGEAAxAKYGEAA5AKYGEABBAKYGEABJAKYGEABR
AKYGEABZAKYGEABhAKYGEABpAKYGBgDhAKYGBgABAaYGFQARAaYGBgBxAAcITgAZAYMHVAAhAfUE
WgApAeMDYQDRADcEZQAxATEIaQB5AKYGBgA5ASIEEAA5AR4FBgCBAKYGbwBJAZgBdgCBAPAHfQBZ
Ae0DgwBJATcGYQCZAK0IiwCJAKYGBgCJAO0EkACJAHgHlwBxAfUEnQCRAMkHowCBAZoIqQCBAZgG
rQChAI4IYQCpAPAAsgCRADkBZQCpALcHtwCxAEcBZQAxATEIvQAxAUoEqQAxAUAExACpAOEAsgCp
AKYHtwCJAX8BygAxATEIzgBJAcoIqQChAKQI1gC5AC0CBgAxATEI2gAxAQAE4ACRAJoH5QCRAfUE
6wAxAdoI8QCxAIsB9wAxAVkGZQCRACgI/QDBAPUEAwExAacACAGZADcEZQAZAR0IDgExAeYIFAGp
AYIGFwEZAVMIAQA5AScCBgCxAS0CBgDJAMsAZQBxAKYGBgDRAKYGBgCZAScBIAGZAb0IKQHpAKYG
LwEJAaYGBgAIABwASQEIACAATgEpAHMAvgEuAAsAlgEuABMAnwEuABsAvgEuACMAxwEuACsA8AEu
ADMA8AEuADsA9gEuAEMAxwEuAEsABQIuAFMA8AEuAFsAJQJDAGMATgFJAHMAvgFjAGsATgGhAHsA
TgEbAAMAAQAEAAMAAABJBocBAADQAYwBAABLCJEBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAA
AAEAAACbGdWDAAAAAAAAAQAAAAQAAAAAAAAAAAAAADcBYQAAAAAADQAAAAAAAAAAAAAAQAFVBAAA
AAAEAAAAAAAAAAAAAAA3AVUAAAAAAAQAAAAAAAAAAAAAADcB/gQAAAAADQAAAAAAAAAAAAAAQAEu
AAAAAAAAAAAAAQAAAPcGAAAFAAIAAAAAU1RfNmI2NzYxYmI4MjJmNDY0OGI3N2JlMDRkNTVmMmU1
YzEAPE1vZHVsZT4ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVt
LkRhdGEAbXNjb3JsaWIAU1RfYjg0Y2Y4ZWIwNmVlNDQ5NWIzOGVhMTczZDU3NjczYmQAY21kAERi
Q29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAFhtbFJlYWRNb2RlAGdl
dF9NZXNzYWdlAERhdGFUYWJsZQBnZXRfQ2hpbGRUYWJsZQBnZXRfUGFyZW50VGFibGUAVmFyaWFi
bGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X1Rh
YmxlTmFtZQBnZXRfQ29sdW1uTmFtZQBEYXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5S
dW50aW1lAGdldF9OZXdMaW5lAGdldF9EYXRhVHlwZQBzZXRfQ29tbWFuZFR5cGUARmFpbHVyZQBn
ZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0
TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NC
YXNlAENsb3NlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRB
dHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRl
AEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5
VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZp
Z3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlv
blJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNv
cHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1
ZQBBZGRXaXRoVmFsdWUAdmFsdWUASW5kZXhPZgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAHNl
dF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAFN1YnN0cmluZwBnZXRfTGVuZ3RoAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3Jp
cHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF82YjY3NjFi
YjgyMmY0NjQ4Yjc3YmUwNGQ1NWYyZTVjMS5kbGwAUmVhZFhtbABnZXRfSXRlbQBTeXN0ZW0ARW51
bQByZXNvdXJjZU1hbgBCb29sZWFuAE9wZW4AU2NyaXB0TWFpbgBEYXRhQ29sdW1uAFNRTENvbm4A
RGF0YVJlbGF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5
c3RlbS5SZWZsZWN0aW9uAERhdGFUYWJsZUNvbGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24A
RGF0YVJlbGF0aW9uQ29sbGVjdGlvbgBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9uAERhdGFSb3dDb2xs
ZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5D
b21tb24AQ3VsdHVyZUluZm8ARXhlY3V0ZVNjYWxhcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFRvVXBw
ZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBTcWxQYXJhbWV0ZXIARmlyZUVycm9yAElFbnVtZXJhdG9y
AEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVu
dGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfYjg0Y2Y4ZWIwNmVlNDQ5
NWIzOGVhMTczZDU3NjczYmQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2lu
Z01vZGVzAFNUX2I4NGNmOGViMDZlZTQ0OTViMzhlYTE3M2Q1NzY3M2JkLlByb3BlcnRpZXMAZ2V0
X1RhYmxlcwBnZXRfVmFyaWFibGVzAFNldHRpbmdzAGdldF9Db2x1bW5zAGdldF9DaGlsZENvbHVt
bnMAZ2V0X1BhcmVudENvbHVtbnMAZ2V0X1BhcmVudFJlbGF0aW9ucwBTeXN0ZW0uQ29sbGVjdGlv
bnMAZ2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X0V2ZW50
cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AERhdGFTZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1
bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AEVudmlyb25tZW50AENvbXBvbmVudABnZXRfQ3VycmVu
dABnZXRfQ291bnQATW92ZU5leHQAZ2V0X05vdwBEYXRhUm93AGdldF9Bc3NlbWJseQBFeGVjdXRl
Tm9uUXVlcnkAb3BfRXF1YWxpdHkARW1wdHkAAAEAGVgATQBMAFMAUQBMAFMAZQByAHYAZQByAAAd
WABNAEwAUwBRAEwARABhAHQAYQBiAGEAcwBlAAAPUwBlAHIAdgBlAHIAPQAAFzsAIABEAGEAdABh
AGIAYQBzAGUAPQAAMzsAVAByAHUAcwB0AGUAZABfAEMAbwBuAG4AZQBjAHQAaQBvAG4APQBUAHIA
dQBlADsAACdYAE0ATABGAGkAbABlAE4AYQBtAGUAVwBpAHQAaABQAGEAdABoAAATWABNAEwARgBp
AGwAZQBJAEQAABlYAE0ATABGAHIAYQBtAGUAVwBvAHIAawAAHVgATQBMAFQAYQBiAGwAZQBQAHIA
ZQBmAGkAeAAAI0cAZQBuAGUAcgBhAHQAZQBYAE0ATABGAGkAbABlAEkARAAAKUAAWABNAEwARgBp
AGwAZQBOAGEAbQBlAFcAaQB0AGgAUABhAHQAaAAAgOtJAE4AUwBFAFIAVAAgAEkATgBUAE8AIABE
AEIATwAuAFsAWABNAEwAVABhAGIAbABlAFIAZQBsAGEAdABpAG8AbgBzAGgAaQBwAF0AKABYAE0A
TABGAGkAbABlAEkARAAsACAAUABhAHIAZQBuAHQAVABhAGIAbABlAE4AYQBtAGUALAAgAFAAYQBy
AGUAbgB0AEMAbwBsAHUAbQBuAE4AYQBtAGUALAAgAEMAaABpAGwAZABUAGEAYgBsAGUATgBhAG0A
ZQAsACAAQwBoAGkAbABkAEMAbwBsAHUAbQBuAE4AYQBtAGUAKQAAAywAABEgAFMARQBMAEUAQwBU
ACAAAAMnAAEFJwAsAAGBH1MARQBMAEUAQwBUACAASQBTAE4AVQBMAEwAKAAoAFMARQBMAEUAQwBU
ACAAJwAjACcAIAArACAAUwBDAC4ATgBBAE0ARQAgACAARgBSAE8ATQAgAFMAWQBTAC4ATwBCAEoA
RQBDAFQAUwAgAFMATwAgAEoATwBJAE4AIABTAFkAUwAuAEMATwBMAFUATQBOAFMAIABTAEMAIABP
AE4AIABTAE8ALgBvAGIAagBlAGMAdABfAGkAZAAgAD0AIABTAEMALgBvAGIAagBlAGMAdABfAGkA
ZAAgAFcASABFAFIARQAgAFMATwAuAFQAWQBQAEUAIAA9ACAAJwBVACcAIABBAE4ARAAgAFMATwAu
AE4AQQBNAEUAIAA9ACAAJwABYScAIABPAFIARABFAFIAIABCAFkAIABTAEMALgBOAEEATQBFACAA
RgBvAHIAIABYAE0ATAAgAFAAQQBUAEgAIAAoACcAJwApACAAKQAgACsAIAAnACMAJwAsACcAJwAp
AAEXIwBYAE0ATABGAGkAbABlAEkARAAjAAAhQQBMAFQARQBSACAAVABBAEIATABFACAARABCAE8A
LgAALSAAQQBEAEQAIABbAFgATQBMAEYAaQBsAGUASQBEAF0AIAAgAGkAbgB0ACAAACNDAFIARQBB
AFQARQAgAFQAQQBCAEwARQAgAEQAQgBPAC4AACEoACAAWABNAEwARgBpAGwAZQBJAEQAIABpAG4A
dAAsAAArIwBYAE0ATABGAGkAbABlAE4AYQBtAGUAVwBpAHQAaABQAGEAdABoACMAAICJIABBAEQA
RAAgAFsAWABNAEwARgBpAGwAZQBOAGEAbQBlAFcAaQB0AGgAUABhAHQAaABdACAAIABuAHYAYQBy
AGMAaABhAHIAKABtAGEAeAApACwAIABYAE0ATABMAG8AYQBkAEQAYQB0AGUAVABpAG0AZQAgAEQA
YQB0AGUAVABpAG0AZQAgAAB9KAAgAFgATQBMAEYAaQBsAGUATgBhAG0AZQBXAGkAdABoAFAAYQB0
AGgAIABuAHYAYQByAGMAaABhAHIAKABtAGEAeAApACwAIABYAE0ATABMAG8AYQBkAEQAYQB0AGUA
VABpAG0AZQAgAEQAYQB0AGUAVABpAG0AZQAsAAAhSQBOAFMARQBSAFQAIABJAE4AVABPACAARABC
AE8ALgAAAygAAANbAAAFXQAsAAADIwAAGVMAWQBTAFQARQBNAC4ASQBOAFQAMQA2AAARcwBtAGEA
bABsAGkAbgB0AAAZUwBZAFMAVABFAE0ALgBJAE4AVAAzADIAAAdpAG4AdAAAGVMAWQBTAFQARQBN
AC4ASQBOAFQANgA0AAANYgBpAGcAaQBuAHQAAB9TAFkAUwBUAEUATQAuAEQAQQBUAEUAVABJAE0A
RQAAEWQAYQB0AGUAdABpAG0AZQAAG1MAWQBTAFQARQBNAC4AUwBUAFIASQBOAEcAABtuAHYAYQBy
AGMAaABhAHIAKABtAGEAeAApAAAbUwBZAFMAVABFAE0ALgBTAEkATgBHAEwARQAADXMAaQBuAGcA
bABlAAAbUwBZAFMAVABFAE0ALgBEAE8AVQBCAEwARQAADWQAbwB1AGIAbABlAAAdUwBZAFMAVABF
AE0ALgBEAEUAQwBJAE0AQQBMAAAdZABlAGMAaQBtAGEAbAAoADEAOAAsACAANgApAAAJXQAgACAA
IAAADSAAQQBEAEQAIABbAAADKQAAGVsAWABNAEwARgBpAGwAZQBJAEQAXQApAABNWwBYAE0ATABG
AGkAbABlAE4AYQBtAGUAVwBpAHQAaABQAGEAdABoAF0ALABYAE0ATABMAG8AYQBkAEQAYQB0AGUA
VABpAG0AZQApAAAFJwAnAAEHJwAsACcAATdJAE4AUwBFAFIAVAAgAEkATgBUAE8AIABEAEIATwAu
AFgATQBMAEUAcgByAG8AcgBMAG8AZwAAfSgAWwBYAE0ATABGAGkAbABlAEkARABdACwAIABbAFMA
UQBMAFMAdABhAHQAZQBtAGUAbgB0AF0ALAAgAFsARQByAHIAbwByAEQAYQB0AGUAVABpAG0AZQBd
ACwAIABbAFgATQBMAFQAYQBiAGwAZQBOAGEAbQBlAF0AKQAAEVMARQBMAEUAQwBUACAAJwABGycA
LABHAEUAVABEAEEAVABFACgAKQAsACcAAQ9YAE0ATABMAG8AYQBkAABnRQByAHIAbwByACAAaQBu
ACAAaQBuAHMAZQByAHQAaQBuAGcAIAB0AGgAZQAgAGYAbwBsAGwAbwB3AGkAbgBnACAAZABhAHQA
YQAgAGYAcgBvAG0AIABYAE0ATAAgAEYAaQBsAGUAAHFTAFQAXwBiADgANABjAGYAOABlAGIAMAA2
AGUAZQA0ADQAOQA1AGIAMwA4AGUAYQAxADcAMwBkADUANwA2ADcAMwBiAGQALgBQAHIAbwBwAGUA
cgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAHLpOYbKoH9Jot02FROXwVYABCABAQgDIAAB
BSABARERBCABAQ4FIAEBEX0yByQOAg4ODg4ODg4ODg4SRRJJDg4ODg4OEU0ODg4IElESVR0SWQgS
WRJZEl0IEmEIEmUFIAASgI0FIAASgJEGIAESgJUcAyAAHAMgAA4FAAEOHQ4GIAIBDhI9BiABARGA
qQUgABKArQcgAhKAsQ4cBAAAEU0GIAERgLUOBSAAEoC5BSABEkkIBSAAEoC9AyAACAQgABJRBCAA
EkkFIAAdElkGAAMODg4OBSACDggIAwAADgcABA4ODg4OAyAAAgUAAg4ODgQgAQgOBSAAEoDJBSAB
ElkIBQACAg4OBSAAEoDNBSAAEoDRBCABHA4FIAIODg4FIAASgNUCBg4IIAUCCA4ODggIAAESgM0R
gN0FIAASgOEHIAIBDhKA4Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhI9AwYSQQMGEnUD
BhJ5AwYSEAIGCAMGERQEAAASdQQAABJ5BQABARJ5BAAAEhADAAABBAgAEnUECAASeQQIABIQCAEA
CAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9iODRj
ZjhlYjA2ZWU0NDk1YjM4ZWExNzNkNTc2NzNiZAAABQEAAAAADgEACU1pY3Jvc29mdAAAHwEAGkNv
cHlyaWdodCBAIE1pY3Jvc29mdCAyMDE3AABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjAB
AFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQAAAC0AAAAzsrvvgEAAACR
AAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQu
MC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNT
eXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAA
BEgAAAAAAAAAAAAAHkgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBIAAAAAAAAAAAAAAAAX0Nv
ckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAPgQA
AAAAAAAAAAAAPgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABANWDmxkAAAEA1YObGT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBJ4D
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHoDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBv
AG4AAAAAAFMAVABfAGIAOAA0AGMAZgA4AGUAYgAwADYAZQBlADQANAA5ADUAYgAzADgAZQBhADEA
NwAzAGQANQA3ADYANwAzAGIAZAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAu
ADAALgA2ADUANQA1AC4AMwAzADcANAA5AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0A
ZQAAAFMAVABfADYAYgA2ADcANgAxAGIAYgA4ADIAMgBmADQANgA0ADgAYgA3ADcAYgBlADAANABk
ADUANQBmADIAZQA1AGMAMQAuAGQAbABsAAAAWgAbAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAATQBpAGMAcgBvAHMAbwBmAHQAIAAyADAAMQA3
AAAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8A
cgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwA2AGIANgA3ADYAMQBiAGIAOAAy
ADIAZgA0ADYANAA4AGIANwA3AGIAZQAwADQAZAA1ADUAZgAyAGUANQBjADEALgBkAGwAbAAAAGgA
JAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYgA4ADQAYwBmADgAZQBiADAANgBl
AGUANAA0ADkANQBiADMAOABlAGEAMQA3ADMAZAA1ADcANgA3ADMAYgBkAAAAQgAPAAEAUAByAG8A
ZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADUANQA1AC4AMwAzADcANAA5AAAAAABG
AA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA2ADUANQA1AC4A
MwAzADcANAA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAADA4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{28586257-E1A9-44E2-A0FD-3765ADD19E6B}"
          DTS:ObjectName="{D97904B5-10FD-4C01-B60A-75B74B5AD367}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::XMLFileNameWithPath" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="199.2,41.6"
          Id="Package\Loop XML Files\Load XML Data into Table"
          TopLeft="43.0073810344879,40.933946882197" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="313.6,156.8"
          Size="313.6,200"
          Id="Package\Loop XML Files"
          TopLeft="213.571432208528,101.099995660782" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>